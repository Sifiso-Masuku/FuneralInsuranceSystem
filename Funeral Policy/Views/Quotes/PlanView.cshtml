@model IEnumerable<Funeral_Policy.Models.Quote>

@{
    ViewBag.Title = "PlanView";
}
<style>
    body {
        font-family: Arial, Helvetica, sans-serif;
    }

    /* The Modal (background) */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    /* Modal Content */
    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

    /* The Close Button */
    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
</style>
<h2>Chosen Cover</h2>

<!-- Trigger/Open The Modal -->
<button id="myBtn">Open To View</button>

<!-- The Modal -->
<div id="myModal" class="modal">

    <!-- Modal content -->
    <div class="modal-content">
        <span class="close">&times;</span>

        <h2>Choosen Funeral Cover</h2>

        @*<p>
                @Html.ActionLink("Create New", "Create")
            </p>*@
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.FuneralPlan.FuneralCoverPayout)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FuneralPlan.FuneralPlanName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FuneralPlan.FuneralPlanDescription)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Surname)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Gender)
                </th>
                @*<th>
                        @Html.DisplayNameFor(model => model.MemberEmail)
                    </th>*@
                <th>
                    @Html.DisplayNameFor(model => model.Age)
                </th>
                @*<th>
                        @Html.DisplayNameFor(model => model.Phone)
                    </th>*@
                <th>
                    @Html.DisplayNameFor(model => model.Quote_Date)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.PremiumCost)
                </th>
                <th></th>
            </tr>

            @foreach (var item in Model)
            {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Funeralpayout)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PlanName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PlanDescription)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Surname)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Gender)
            </td>
            @*<td>
            @Html.DisplayFor(modelItem => item.MemberEmail)
        </td>*@
            <td>
                @Html.DisplayFor(modelItem => item.Age)
            </td>
            @*<td>
            @Html.DisplayFor(modelItem => item.Phone)
        </td>*@
            <td>
                @Html.DisplayFor(modelItem => item.Quote_Date)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PremiumCost)
            </td>
            @*<td>
            @Html.ActionLink("Edit", "Edit", new { id = item.quoteId }) |
            @Html.ActionLink("Details", "Details", new { id = item.quoteId }) |
            @Html.ActionLink("Delete", "Delete", new { id = item.quoteId })
        </td>*@
        <td>
            <a href="@Url.Action("Index2", "MemberApplications", new { id = item.MemberAplicationId })" rel="tooltip" title="Back" class="btn btn-success btn-simple btn-xs">Back</a>

        </td>
        </tr>
            }

        </table>
    </div>
</div>
<script>// Get the modal
    var modal = document.getElementById("myModal");

    // Get the button that opens the modal
    var btn = document.getElementById("myBtn");

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];

    // When the user clicks the button, open the modal
    btn.onclick = function () {
        modal.style.display = "block";
    }

    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
        modal.style.display = "none";
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }</script>
